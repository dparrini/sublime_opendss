%YAML 1.2
---
# David R. Parrini
file_extensions:
  - dss
scope: source.opendss

variables:
  identifier: (?:[^=\.,\^\s\(\)\[\]\{\}'"]+)
  number: '(?:(?:\+|-)?)(?:(?:0(?:x|X)[0-9a-fA-F]*)|(?:(?:[0-9]+\.?[0-9]*)|(?:\.[0-9]+))(?:(?:e|E)(?:\+|-)?[0-9]+)?)(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?'
  # OpenDSS variable 
  variable: (@)([^=\s^.]+)(?:(?:(?:(\.)(?:[0-9]+))*)|(?:(\^)[[:alnum:]]+))
  # OpenDSS objects
  objects: (?i)(?:Circuit|LineCode|LineGeometry|LineSpacing|LoadShape|GrowthShape|TCC_Curve|CNData|TSData|WireData|XfmrCode|Vsource|Isource|Fault|Capacitor|Line|Reactor|Transformer|GICTransformer|GICLine|Load|Generator|Indmach012|Storage|CapControl|RegControl|EnergyMeter|Monitor)
  # separator (whitespace, comma, comma + whitespace)
  sep: "(?:\\s*(,)\\s*|\\s+)"
  # separator, only one char
  sep1: "[\\s,]"
  # array begin
  array_begin: "[\\[({'\"]"
  # array end
  array_end: "[\\])}'\"]"
  # match any array with its contents
  array_match: (?:\[.*\]|\(.*\)|\{.*\}|".*"|'.*')
  # RPN functions
  rpnfun: (?i)(?:sqrt|sqr|inv|ln|exp|log10|asin|acos|atan2|atan|sin|cos|tan|Rollup|Rolldn|Swap)
  # RPN operators
  rpnop: "(?:[/\\-+*^])"
  # unary RPN operators/functions
  rpn_op_un: "(?i)(?:\\-|\\+|sqrt|sqr|inv|ln|exp|log10|asin|acos|atan|sin|cos|tan)"
  # binary (or more args) RPN operators/functions
  rpn_op_bi: "(?i)(?:\\*|\\^|\\-|\\+|/|atan2|Swap|Rolldn|Swap)"
  # RPN valid values: numbers and pi constant
  rpn_val: (?:{{number}}|pi)
  # expect RPN pattern
  expect_rpn: "(?i)(?=({{rpn_val}}{{sep}})+(?:{{rpn_op_un}}|{{rpn_val}}{{sep}}{{rpn_op_bi}}))"

contexts:
  main:
    - include: global

  global:
    - include: comment
    - include: string
    - include: new
    - include: edit
    - include: var
    - include: query
    - include: more
    - include: standalone-commands
    - include: commands
    - include: solution-commands
    - include: set-value

  eol-pop:
    # end-of-line context pop
    - match: $
      pop: true

  test:
    - comment: test context
      match: .*$
      scope: invalid.illegal.test

  comment:
    - comment: line comment
      match: ^(//)
      captures: 
        1: punctuation.definition.comment.opendss
      push:
        - meta_scope: comment.line.opendss
        - include: eol-pop

    - comment: inline comment
      match: \!
      scope: punctuation.definition.comment.opendss
      push:
        - meta_scope: comment.line.opendss
        - include: eol-pop

    - comment: block comment
      match: ^(/\*)
      captures:
        1: punctuation.definition.comment.begin.opendss
      push:
        - meta_scope: comment.block.opendss
        - match: \*/
          scope: punctuation.definition.comment.end.opendss
          set:
            # the comment continues until the end of line
            - meta_scope: comment.block.opendss
            - include: eol-pop

  new:
    - match: (?i)^New(?=\b)
      scope: punctuation.new.opendss
      set: expect-object

  edit:
    - match: (?i)^Edit(?=\b)
      scope: keyword.control.edit.opendss
      set: expect-object

  expect-object:
    - include: eol-pop
    - include: comment

    - comment: Starting with object name (without spaces)
      match: (?i)(?=(?:object\s*=\s*)?(?:{{array_begin}}\s*)?(?:{{objects}}|{{identifier}}))
      set: [edit-function, edit-object]

  edit-object:
    - include: eol-pop
    - include: comment

    - comment: object = xxxx.yyyy.zzz syntax
      match: (?i)object(?=\b)
      scope: variable.function.opendss entity.name.param.opendss
      set:
        - include: eol-pop
        - include: comment
        - match: (?:\s*)(\=)(?:\s*)
          captures: 
            1: keyword.operator.opendss
          set: object

    - include: object

  object:
    - include: eol-pop
    - include: comment

    - comment: OpenDSS object.name.property
      match: (?i)\b({{objects}})(\.)
      captures:
        0: meta.object.opendss
        1: storage.type.opendss
        2: punctuation.accessor.opendss
      set: object-name
      with_prototype:
        - match: "(?=[\\s,=])"
          pop: true

    - comment: Array-quoted \"object.name.property\"
      match: "{{array_begin}}"
      scope: punctuation.group.begin.opendss
      set: 
        - include: comment
        - include: eol-pop
        - meta_scope: quoted_object_name
        - comment: OpenDSS object.name.property
          match: (?i)({{objects}})(\.)
          captures:
            0: meta.object.opendss
            1: storage.type.opendss
            2: punctuation.accessor.opendss
          push: object-name
          with_prototype:
            - match: "(?=[\"'(\\[{])"
              pop: true
        - match: "{{array_end}}"
          scope: punctuation.group.end.opendss
          pop: true

    - comment: Object name without object type
      match: "(?<=\\s|=|^)(?!={{objects}})"
      set: object-name
      with_prototype:
        - match: "(?=[\\s,=])"
          pop: true

  object-name:
    - meta_scope: entity.name.object.opendss meta.object.opendss
    - include: eol-pop
    - include: comment
    - match: \.|\^
      scope: punctuation.accessor.opendss

    - match: '{{variable}}'
      captures:
        0: variable.opendss
        1: punctuation.definition.variable.opendss
        3: punctuation.accessor.opendss
        4: punctuation.accessor.opendss

  var:
    - match: (?i)^(var)\b
      captures:
        0: meta.var.opendss
        1: keyword.var.opendss
      push:
        - meta_scope: meta.var.opendss
        - include: comment
        - include: eol-pop

        - comment: variable value output mode
          match: \@(?={{identifier}}(?!.*=))
          scope: punctuation.definition.variable.opendss entity.name.variable.opendss
          set:
            - meta_scope: meta.var.opendss
            - include: comment
            - include: eol-pop
            - match: "{{identifier}}"
              scope: meta.var.opendss entity.name.variable.opendss
              set:
                - include: comment
                - include: eol-pop
                - match: \S
                  scope: invalid.illegal.opendss

        - comment: setting variables mode
          match: (?=\@{{identifier}}\s*=)
          push:
            - meta_scope: meta.var.opendss
            - include: comment
            - include: eol-pop
            - match: \@
              scope: punctuation.definition.variable.opendss entity.name.variable.opendss
              set:
                - meta_scope: meta.var.opendss
                - match: "{{identifier}}"
                  scope: entity.name.variable.opendss variable.opendss
                  set:
                    - match: \=
                      scope: keyword.operator.opendss meta.var.opendss
                      set: right-value
                    - include: comment
                    - include: eol-pop

  query:
    - match: ^\?
      scope: punctuation.query.opendss
      push:
        # TODO: change it to a "query" property context
        - meta_scope: string.unquoted.opendss
        - include: eol-pop
        - include: comment

  more:
    - match: (?i)^(More|M|~)(?=\s)
      scope: punctuation.more.opendss
      push: edit-function

  edit-function:
    - meta_scope: meta.edit.opendss
    - include: comment
    - include: eol-pop

    - comment: keyworded parameters
      match: '({{identifier}})\s*(\=)'
      captures:
        1: variable.function.opendss entity.name.param.opendss
        2: keyword.operator.opendss
      push: right-value

    - comment: positional parameters
      match: (?<=\s)(?=(?:{{number}}|{{variable}}|{{array_match}}|{{identifier}})(?:\s|$))
      push: right-value

    - match: ','
      scope: punctuation.separator.opendss

  right-value:
    - include: rpn
    - include: array

    - comment: pop after an array # array-end
      match: (?<=[\]\)}'"])
      pop: true

    - match: '{{variable}}(?={{sep}})'
      captures:
        0: variable.opendss
        1: punctuation.definition.variable.opendss
        3: punctuation.definition.variable.opendss
        4: punctuation.definition.variable.opendss
      pop: true

    - match: '{{number}}(?={{sep}})'
      scope: constant.numeric.opendss
      pop: true

    - match: "{{identifier}}(?={{sep}})"
      scope: entity.name.object.opendss
      pop: true

    - match: $
      scope: invalid.illegal
      set: edit-function

  array:
    - match: \[
      scope: punctuation.group.brackets.begin.opendss
      embed: array-internal
      escape: \]
      embed_scope: meta.brackets
      escape_captures: 
        0: punctuation.group.brackets.end.opendss

    - match: \(
      scope: punctuation.group.parens.begin.opendss
      embed: array-internal
      escape: \)
      embed_scope: meta.parens
      escape_captures: 
        0: punctuation.group.parens.end.opendss

    - match: \{
      scope: punctuation.group.braces.begin.opendss
      embed: array-internal
      escape: \}
      embed_scope: meta.braces
      escape_captures: 
        0: punctuation.group.braces.end.opendss

    - match: \'
      scope: punctuation.group.single.begin.opendss
      embed: array-internal
      escape: \'
      embed_scope: meta.single
      escape_captures: 
        0: punctuation.group.single.end.opendss

    - match: \"
      scope: punctuation.group.double.begin.opendss
      embed: array-internal
      escape: \"
      embed_scope: meta.double
      escape_captures: 
        0: punctuation.group.double.end.opendss

  array-internal:
    - meta_scope: meta.array.opendss
    - include: rpn
    - include: array
    - include: reserved-variables
    
    - match: (?:\|)
      scope: punctuation.separator.opendss

    - match: (?:,)
      scope: punctuation.separator.opendss

    - match: "{{number}}"
      scope: constant.numeric.opendss

    - match: "(@)?({{identifier}})(?:\\.{{identifier}})*(?:(?={{sep}})|(?={{array_end}}))"
      captures:
        0: entity.name.variable.opendss
        1: punctuation.definition.variable.opendss

    - comment: single-column CSV file
      match: (?i)\b(file)\b(\=)\b
      captures:
        1: variable.language.opendss
        2: keyword.operator.opendss
      set:
        - include: eol-pop
        - include: comment
        - meta_scope: string.unquoted.opendss
        - match: ","
          scope: punctuation.separator.opendss
          embed: edit-function
          escape: "(?={{array_end}})"

    - comment: binary file of doubles
      match: (?i)\b(dblfile)\b(\=)\b
      captures:
        1: variable.language.opendss
        2: keyword.operator.opendss
      set:
        - include: eol-pop
        - include: comment
        - meta_scope: string.unquoted.opendss
        - match: ","
          scope: punctuation.separator.opendss
          embed: edit-function
          escape: "(?={{array_end}})"

    - comment: binary file of doubles
      match: (?i)\b(sngfile)\b(\=)\b
      captures:
        1: variable.language.opendss
        2: keyword.operator.opendss
      set:
        - include: eol-pop
        - include: comment
        - meta_scope: string.unquoted.opendss
        - match: ","
          scope: punctuation.separator.opendss
          embed: edit-function
          escape: "(?={{array_end}})"

  rpn:
    - match: "\\[{{expect_rpn}}"
      scope: punctuation.definition.rpn.begin.opendss
      embed: rpn-internal
      escape: \]
      embed_scope: meta.double meta.rpn.opendss
      escape_captures: 
        0: punctuation.group.double.end.opendss

    - match: "\\[{{expect_rpn}}"
      scope: punctuation.group.brackets.begin.opendss
      embed: rpn-internal
      escape: \]
      embed_scope: meta.brackets meta.rpn.opendss
      escape_captures: 
        0: punctuation.group.brackets.end.opendss

    - match: "\\({{expect_rpn}}"
      scope: punctuation.group.parens.begin.opendss
      embed: rpn-internal
      escape: \)
      embed_scope: meta.parens meta.rpn.opendss
      escape_captures: 
        0: punctuation.group.parens.end.opendss

    - match: "{{{expect_rpn}}"
      scope: punctuation.group.braces.begin.opendss
      embed: rpn-internal
      escape: \}
      embed_scope: meta.braces meta.rpn.opendss
      escape_captures: 
        0: punctuation.group.braces.end.opendss

    - match: "'{{expect_rpn}}"
      scope: punctuation.group.single.begin.opendss
      embed: rpn-internal
      escape: \'
      embed_scope: meta.single meta.rpn.opendss
      escape_captures: 
        0: punctuation.group.single.end.opendss

    - match: "\"{{expect_rpn}}"
      scope: punctuation.group.double.begin.opendss
      embed: rpn-internal
      escape: \"
      embed_scope: meta.double meta.rpn.opendss
      escape_captures: 
        0: punctuation.group.double.end.opendss

  rpn-internal:
    - include: comment

    - comment: RPN operators
      match: "{{rpnop}}"
      scope: keyword.operator.opendss meta.rpn.opendss

    - comment: RPN functions
      match: \b{{rpnfun}}\b
      scope: variable.function.opendss meta.rpn.opendss

    - comment: RPN constants
      match: (?i)\b(pi)\b
      scope: constant.language.opendss meta.rpn.opendss

    - match: \b{{number}}\b
      scope: constant.numeric.opendss

  string:
    - match: \[
      scope: punctuation.definition.string.begin.opendss
      set: 
        - meta_scope: string.quoted.brackets.opendss
      with_prototype:
        - match: \]
          scope: punctuation.definition.string.end.opendss
          pop: true

    - match: \(
      scope: punctuation.definition.string.begin.opendss
      set: 
        - meta_scope: string.quoted.parens.opendss
      with_prototype:
        - match: \)
          scope: punctuation.definition.string.end.opendss
          pop: true

    - match: \{
      scope: punctuation.definition.string.begin.opendss
      set: 
        - meta_scope: string.quoted.braces.opendss
      with_prototype:
        - match: \}
          scope: punctuation.definition.string.end.opendss
          pop: true

    - match: \'
      scope: punctuation.definition.string.begin.opendss
      set:
        - meta_scope: string.quoted.single.opendss
      with_prototype:
        - match: \'
          scope: punctuation.definition.string.end.opendss
          pop: true

    - match: \"
      scope: punctuation.definition.string.begin.opendss
      set:
        - meta_scope: string.quoted.double.opendss
      with_prototype:
        - match: \"
          scope: punctuation.definition.string.end.opendss
          pop: true

  string-internal:
        - meta_scope: string.quoted.double.opendss

  set-value:
    - include: eol-pop
    - include: comment
    - match: (?i)(?={{identifier}}(\.{{identifier}})*)
      push: [set-value_consume=, object]

  set-value_consume=:
    - meta_scope: meta.set-value.opendss
    - include: eol-pop
    - include: comment

    - match: (?:\s*)(=)(?:\s*)
      scope: keyword.operator.opendss
      set:
        - meta_scope: meta.set-value.opendss
        - include: right-value


  standalone-commands:
    - match: (?i)^(Cleanup|Disconnect|About|BuildY|CktLosses|Clear|ClearBusMarkers|Currents|Estimate|FinishTimeStep|Help|Init|Losses|MakeBusList|MakePosSeq|Obfuscate|PhaseLosses|Powers|ReprocessBuses|Sample|SeqCurrents|SeqPowers|SeqVoltages|Summary|Totals|UpdateStorage|Varnames|VarValues|Vdiff|Voltages|Ysc|Zsc|Zsc10|ZscRefresh)\b
      scope: keyword.command.opendss
      push:
        - meta_scope: meta.command.opendss
        - include: eol-pop
        - include: comment
        - match: "[^\\s$]+"
          scope: invalid.illegal.opendss
          pop: true

  commands:
    - match: (?i)^(Connect|AddBusMarker|AlignFile|AllocateLoads|BatchEdit|BusCoords|CalcVoltageBases|CalcV|Capacity|CD|Close|CloseDI|Comparecases|DI_plot|Disable|Distribute|DOScmd|Dump|Enable|Export|Fileedit|Formedit|Get|Guids|Interpolate|LatLongCoords|NodeList|NodeDiff|Open|Plot|PstCalc|Reconductor|Reduce|RelCalc|Remove|Rephase|Reset|Rotate|Save|Select|Set|SetkVBase|Show|Solve|Variable|Visualize|YearlyCurves)\b
      scope: keyword.command.opendss

    - match: (?i)^(?:Redirect|Compile)\b
      scope: keyword.command.opendss meta.filecommand.opendss
      push:
        - meta_scope: meta.filecommand.opendss
        - include: eol-pop
        - include: comment
        - match: .*(?=$)
          scope: string.unquoted.opendss entity.name.file.opendss

  solution-commands:
    - match: (?i)^(_)(DoControlActions|InitSnap|SampleControls|ShowControlQueue|SolveDirect|SolveNoControl|SolvePFlow)\b
      captures:
        1: punctuation.keyword.opendss
        2: keyword.command.opendss

  reserved-variables:
    - match: (?i)\%result\%
      scope: variable.language.opendss

    - match: (?i)\b(?:NONE)\b

    - match: (?i)\b(?:true|false|yes|no)\b
      scope: variable.language.opendss

    - match: (?i)\b(?:fixed|variable)\b
      scope: variable.language.opendss

    - comment: transformer connection (Conn)
      match: (?i)\b(?:wye|y|LN|delta|LL)\b
      scope: variable.language.opendss
