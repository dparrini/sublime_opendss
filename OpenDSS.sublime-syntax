%YAML 1.2
---
# David R. Parrini
file_extensions:
  - dss
scope: source.opendss

variables:
  identifier: (?:[^=\s]+)
  number: '(?:(?:0(?:x|X)[0-9a-fA-F]*)|(?:(?:[0-9]+\.?[0-9]*)|(?:\.[0-9]+))(?:(?:e|E)(?:\+|-)?[0-9]+)?)(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?(?=\b)'
  variable: (@)([^=\s^.]+)(?:(?:(?:(\.)(?:[0-9]+))*)|(?:(\^)[[:alnum:]]+))
  rpnfun: (?i)(?:sqrt|sqr|inv|ln|exp|log10|sin|cos|tan|asin|acos|atan|atan2|Rollup|Rolldn|Swap)

contexts:
  main:
    - include: global

  global:
    - include: comment
    - include: string
    - include: new
    - include: var
    - include: query
    - include: more
    - include: standalone-commands
    - include: commands
    - include: solution-commands

  eol-pop:
    # end-of-line context pop
    - match: $
      pop: true

  comment:
    - comment: line comment
      match: ^(//)
      captures: 
        1: punctuation.definition.comment.opendss
      push:
        - meta_scope: comment.line.opendss
        - include: eol-pop

    - comment: inline comment
      match: \!
      scope: punctuation.definition.comment.opendss
      push:
        - meta_scope: comment.line.opendss
        - include: eol-pop

    - comment: block comment
      match: ^(/\*)
      captures:
        1: punctuation.definition.comment.begin.opendss
      push:
        - meta_scope: comment.block.opendss
        - match: \*/
          scope: punctuation.definition.comment.end.opendss
          set:
            # the comment continues until the end of line
            - meta_scope: comment.block.opendss
            - include: eol-pop

  new:
    - match: (?i)^New
      scope: punctuation.new.opendss
      set:
        - include: eol-pop
        - include: comment
        
        - comment: Quoted name
          match: ("|')
          scope: punctuation.definition.string.begin
          embed: scope:support.class.opendss
          escape: (\1)
          escape_captures:
            1: punctuation.definition.string.end

        - comment: ObjectType.Name
          match: \b((?:{{identifier}})(?:\.{{identifier}})?)\b
          scope: support.class.opendss
          push: edit

        - comment: after getting the object name
          match: (?<!New)(\s|,)
          set: edit

  var:
    - match: (?i)^(var)\b
      captures:
        0: meta.var.opendss
        1: keyword.var.opendss
      push:
        - meta_scope: meta.var.opendss
        - include: comment
        - include: eol-pop

        - comment: variable value output mode
          match: \@(?={{identifier}}(?!.*=))
          scope: punctuation.definition.variable.opendss entity.name.variable.opendss
          set:
            - meta_scope: meta.var.opendss
            - include: comment
            - include: eol-pop
            - match: "{{identifier}}"
              scope: meta.var.opendss entity.name.variable.opendss
              set:
                - include: comment
                - include: eol-pop
                - match: \S
                  scope: invalid.illegal.opendss

        - comment: setting variables mode
          match: (?=\@{{identifier}}\s*=)
          push:
            - meta_scope: meta.var.opendss
            - include: comment
            - include: eol-pop
            - match: \@
              scope: punctuation.definition.variable.opendss entity.name.variable.opendss
              set:
                - meta_scope: meta.var.opendss
                - match: "{{identifier}}"
                  scope: entity.name.variable.opendss variable.opendss
                  set:
                    - match: \=
                      scope: keyword.operator.opendss meta.var.opendss
                      set: right-value
                    - include: comment
                    - include: eol-pop

  query:
    - match: ^\?
      scope: punctuation.query.opendss
      push:
        # TODO: change it to a "query" property context
        - meta_scope: string.unquoted.opendss
        - include: eol-pop
        - include: comment

  more:
    - match: (?i)^(More|M|~)
      scope: punctuation.more.opendss
      push: edit

  edit:
    - include: comment
    - include: eol-pop

    - match: '({{identifier}})\s*(\=)'
      captures:
        1: variable.function.opendss entity.name.param.opendss
        2: keyword.operator.opendss
      push: right-value

    - match: ','
      scope: punctuation.separator.opendss

  right-value:
    - include: array

    - comment: pop after an array
      match: (?<=[\]\)}'"])
      pop: true

    - match: '{{variable}}'
      captures:
        0: variable.opendss
        1: punctuation.definition.variable.opendss
        3: punctuation.definition.variable.opendss
        4: punctuation.definition.variable.opendss
      pop: true

    - match: '{{number}}'
      scope: constant.numeric.opendss
      pop: true

    - match: '([[:alnum:]]*)(?=\b)'
      scope: constant.language.opendss
      pop: true

    - match: $
      scope: invalid.illegal
      set: edit


  array:
    - match: \[
      scope: punctuation.group.brackets.begin.opendss
      embed: array-internal
      escape: \]
      embed_scope: meta.brackets
      escape_captures: 
        0: punctuation.group.brackets.end.opendss

    - match: \(
      scope: punctuation.group.parens.begin.opendss
      embed: array-internal
      escape: \)
      embed_scope: meta.parens
      escape_captures: 
        0: punctuation.group.parens.end.opendss

    - match: \{
      scope: punctuation.group.braces.begin.opendss
      embed: array-internal
      escape: \}
      embed_scope: meta.braces
      escape_captures: 
        0: punctuation.group.braces.end.opendss

    - match: \'
      scope: punctuation.group.single.begin.opendss
      embed: array-internal
      escape: \'
      embed_scope: meta.single
      escape_captures: 
        0: punctuation.group.single.end.opendss

    - match: \"
      scope: punctuation.group.double.begin.opendss
      embed: array-internal
      escape: \"
      embed_scope: meta.double
      escape_captures: 
        0: punctuation.group.double.end.opendss

  array-internal:
    - meta_scope: meta.array.opendss
    - include: array

    - comment: RPN operators
      match: (?:[/\-+*^])
      scope: keyword.operator.opendss meta.rpn.opendss

    - comment: RPN functions
      match: \b{{rpnfun}}\b
      scope: variable.function.opendss meta.rpn.opendss

    - comment: single-column CSV file
      match: (?i)\b(file)\b(\=)\b
      captures:
        1: variable.language.opendss
        2: keyword.operator.opendss
      set:
        - meta_scope: string.unquoted.opendss
        - match: ","
          scope: punctuation.separator.opendss
          set: array-internal

    - comment: binary file of doubles
      match: (?i)\b(dblfile)\b(\=)\b
      captures:
        1: variable.language.opendss
        2: keyword.operator.opendss
      set:
        - meta_scope: string.unquoted.opendss

    - comment: binary file of doubles
      match: (?i)\b(sngfile)\b(\=)\b
      captures:
        1: variable.language.opendss
        2: keyword.operator.opendss
      set:
        - meta_scope: string.unquoted.opendss

  string:
    - match: \[
      scope: punctuation.definition.string.begin.opendss
      set: 
        - meta_scope: string.quoted.brackets.opendss
      with_prototype:
        - match: \]
          scope: punctuation.definition.string.end.opendss
          pop: true

    - match: \(
      scope: punctuation.definition.string.begin.opendss
      set: 
        - meta_scope: string.quoted.parens.opendss
      with_prototype:
        - match: \)
          scope: punctuation.definition.string.end.opendss
          pop: true

    - match: \{
      scope: punctuation.definition.string.begin.opendss
      set: 
        - meta_scope: string.quoted.braces.opendss
      with_prototype:
        - match: \}
          scope: punctuation.definition.string.end.opendss
          pop: true

    - match: \'
      scope: punctuation.definition.string.begin.opendss
      set:
        - meta_scope: string.quoted.single.opendss
      with_prototype:
        - match: \'
          scope: punctuation.definition.string.end.opendss
          pop: true

    - match: \"
      scope: punctuation.definition.string.begin.opendss
      set:
        - meta_scope: string.quoted.double.opendss
      with_prototype:
        - match: \"
          scope: punctuation.definition.string.end.opendss
          pop: true

  string-internal:
        - meta_scope: string.quoted.double.opendss

  standalone-commands:
    - match: (?i)^(Cleanup|Disconnect|About|BuildY|CktLosses|Clear|ClearBusMarkers|Currents|Estimate|FinishTimeStep|Help|Init|Losses|MakeBusList|MakePosSeq|Obfuscate|PhaseLosses|Powers|ReprocessBuses|Sample|SeqCurrents|SeqPowers|SeqVoltages|Summary|Totals|UpdateStorage|Varnames|VarValues|Vdiff|Voltages|Ysc|Zsc|Zsc10|ZscRefresh)\b
      scope: keyword.command.opendss

  commands:
    - match: (?i)^(Connect|AddBusMarker|AlignFile|AllocateLoads|BatchEdit|BusCoords|CalcVoltageBases|Capacity|CD|Close|CloseDI|Comparecases|Compile|DI_plot|Disable|Distribute|DOScmd|Dump|Edit|Enable|Export|Fileedit|Formedit|Get|Guids|Interpolate|LatLongCoords|NodeList|NodeDiff|Open|Plot|PstCalc|Reconductor|Redirect|Reduce|RelCalc|Remove|Rephase|Reset|Rotate|Save|Select|Set|SetkVBase|Show|Solve|Variable|Visualize|YearlyCurves)\b
      scope: keyword.command.opendss

  solution-commands:
    - match: (?i)^(_)(DoControlActions|InitSnap|SampleControls|ShowControlQueue|SolveDirect|SolveNoControl|SolvePFlow)\b
      captures:
        1: punctuation.keyword.opendss
        2: keyword.command.opendss
